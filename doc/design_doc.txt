Filezoo Design Document
-----------------------

The Filezoo application is a zoomable file manager.

On a high level, it consists of the following parts:
  * Filesystem model
    - A thread-safe model with in-progress updates of recursive traversal info
    - Monitor filesystem for changes
    - Invalidate and rebuild changed parts of the tree
  * Renderer
    - Draw the filesystem model on screen
  * User interface
    - Control renderer based on user input
    - Guide filesystem traversal

The dataflow between these parts is:

   Model -> Renderer -> User -> User interface
     ^_________^______________________|


Clean conceptual models aside, this is the overview of the current program:

  * FSCache -- the filesystem model
    - thread-safe model of the filesystem
    - stores measurement info and sorted layouts
    - fast lock-free read access
    - manages file system watcher and invalidation
    - does multi-threaded recursive traversal with in-progress updates through
      shared object references
    - all edits to the model are serialized through the FSCache static class
    - uses paths as keys to the model
    - can be told to start a recursive traversal of a path
    - can be told to stop all traversals in progress
    - can be told to invalidate a path's cache entry

  * FSDraw -- the filesystem renderer part
    - reads data from FSCache and draws it to screen recursively
    - does draw area bounded traversal (PreDraw) to build the draw model
      asynchronously, the renderer draws only parts that are set ready to draw
      by the traversal thread
    - provides click target information to the UI
    - provides zoom navigation information to the UI

  * Filezoo -- the user interface and renderer, a Gtk DrawingArea
    - gets the root model for the current directory
    - starts PreDraw on user actions and on FSCache changes
    - redraws screen using a timer (redraw if PreDraw in progress or PreDraw
      completed and not yet drawn.)
    - tells FSCache to set up a watcher to watch changes to the current
      directory
    - draws the toolbars
    - handles executing click actions
    - handles UI events
    - sets up the zoom and pan, translates and scales accordingly before drawing

  * Main -- init, finalize
    - sets up config and session data [, parses command line options]
      - directory emblem patterns
      [- directory view settings, some day]


Conceptually it's ok, but the design and implementation still suck.

In particular:
  Predraw and draw use the same data structure, which causes flicker:
    0. Predraw and draw happen in separate threads.
    1. Predraw traverses FSCache and calls "make this ReadyToDraw" for each
       visible item.
    2. Draw traverses FSCache, drawing items that are set ReadyToDraw.

    If the new predraw for a previously drawn dir isn't finished, draw doesn't
    draw it, which causes disturbing flicker if the dir is large on the screen.

    If draw enters a long-taking directory and predraw updates the directory
    entry measurements during that time, the draw may overflow.

    Predraw and draw use FSCache, which means that FS events (invalidation and
    traversal) may cause the predraw & draw to fail.

    FSCache is buggy, the du traversal doesn't do partial traversals, and stats
    aren't updated for parent dirs during traversal.

A better design:
  * FSCache does _only_ FS caching. No sorting. No measuring. No draw state storage.
  * Predraw builds a new draw tree on every rebuild, and does it by atomically
    swapping completed bits. If something's not in the tree, it won't get drawn.
    If something is in the tree, it will get drawn. No ReadyToDraw.
  * The atomic swapping works like this:
    1. if current is not visible, remove current from parent
    2. if current is visible, create a copy of it and update the copy's entries
    3. replace current with the copy and continue down the copy
    - as only ready-to-draw entries are put into the tree, the tree is always
      ready to draw.
    - as _nodes_ are replaced (instead of whole subtrees), there won't be
      drawing flicker.
